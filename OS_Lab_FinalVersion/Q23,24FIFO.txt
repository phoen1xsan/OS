//Using C++
#include <iostream>
#include <queue>
#include <unordered_set>
#include <vector>
using namespace std;

int main(){
    vector<int> reference = {1,2,3,4,1,2,5,1,2,3,4,5};
    int frames = 4;
    int faults = 0;
    int hits = 0;
    queue<int> q;
    unordered_set<int> s;
    for(int i=0; i<reference.size(); ++i){
        int page = reference[i];
        if(q.size()<frames){ // frames not full
            if(s.find(page)==s.end()){ // page not found
                q.push(page);
                s.insert(page);
                faults++;
            }
            else{ // page found
                hits++;
            }
        }
        else{ // frames full
            if(s.find(page)==s.end()){ // page not found
                int first = q.front();
                q.pop();
                s.erase(first);
                q.push(page);
                s.insert(page);
                faults++;
            }
            else{ // page found
                hits++;
            }
        }
    }
    cout<<"Page Hits -> "<<hits<<endl;
    cout<<"Page Faults -> "<<faults<<endl;
    return 0;
}




//Using C
#include <stdio.h>
int main()
{
 int incomingStream[] = {4, 2, 7, 1, 9};
 int pageFaults = 0;
 int frames = 3;
 int m, n, s, pages;
 pages = sizeof(incomingStream) / sizeof(incomingStream[0]);
 printf("Incoming \t\t Frame 1 \t\t Frame 2 \t\t Frame 3 ");
 int temp[frames];
 for (m = 0; m < frames; m++)
 {
 temp[m] = -1;
 }
 for (m = 0; m < pages; m++)
 {
 s = 0;
 for (n = 0; n < frames; n++)
 {
 if (incomingStream[m] == temp[n])
 {
 s++;
 pageFaults--;
 }
 }
 pageFaults++;
 if ((pageFaults <= frames) && (s == 0))
 {
 temp[m] = incomingStream[m];
 }
 else if (s == 0)
 {
 temp[(pageFaults - 1) % frames] = incomingStream[m];
 }
 printf("\n");
 printf("%d\t\t\t", incomingStream[m]);
 for (n = 0; n < frames; n++)
 {
 if (temp[n] != -1)
 printf(" %d\t\t\t", temp[n]);
 else
 printf(" - \t\t\t");
 }
 }
 printf("\n\nTotal number of Page Faults: %d\n", pageFaults);
 return 0;
}




#Using python
incomingStream = [4, 2, 7, 1, 9]
pageFaults = 0
frames = 3
pages = len(incomingStream)
print("Incoming \t\t Frame 1 \t\t Frame 2 \t\t Frame 3 ")
temp = [-1] * frames
for m in range(frames):
    temp[m] = -1
for m in range(pages):
    s = 0
    for n in range(frames):
        if incomingStream[m] == temp[n]:
            s += 1
            pageFaults -= 1
    pageFaults += 1
    if (pageFaults <= frames) and (s == 0):
        temp[m] = incomingStream[m]
    elif s == 0:
        temp[(pageFaults - 1) % frames] = incomingStream[m]
    print("\n")
    print(f"{incomingStream[m]}\t\t\t", end="")
    for n in range(frames):
        if temp[n] != -1:
            print(f" {temp[n]}\t\t\t", end="")
        else:
            print(" - \t\t\t", end="")
print("\n\nTotal number of Page Faults:", pageFaults)
