//Using C
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

int main() {
    int n, i, completed, shortest;
    float avgWaitingTime, avgTurnaroundTime;
    int *arrivalTimes, *burstTimes, *completionTimes, *waitingTimes, *turnaroundTimes, *isCompleted;
    int currentTime = 0;
    int shortestBurst;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    arrivalTimes = (int*) calloc(n, sizeof(int));
    burstTimes = (int*) calloc(n, sizeof(int));
    completionTimes = (int*) calloc(n, sizeof(int));
    waitingTimes = (int*) calloc(n, sizeof(int));
    turnaroundTimes = (int*) calloc(n, sizeof(int));
    isCompleted = (int*) calloc(n, sizeof(int));

    printf("Enter the arrival time and burst time for each process:\n");
    for (i = 0; i < n; i++) {
        printf("Process %d Arrival Time: ", i+1);
        scanf("%d", &arrivalTimes[i]);
        printf("Process %d Burst Time: ", i+1);
        scanf("%d", &burstTimes[i]);
        isCompleted[i] = 0;
    }

    completed = 0;
    while (completed < n) {
        shortest = -1;
        shortestBurst = INT_MAX;
        for (i = 0; i < n; i++) {
            if (!isCompleted[i] && arrivalTimes[i] <= currentTime && burstTimes[i] < shortestBurst) {
                shortest = i;
                shortestBurst = burstTimes[i];
            }
        }
        if (shortest == -1) {
            currentTime += 1;
        } else {
            completionTimes[shortest] = currentTime + burstTimes[shortest];
            waitingTimes[shortest] = currentTime - arrivalTimes[shortest];
            turnaroundTimes[shortest] = waitingTimes[shortest] + burstTimes[shortest];
            isCompleted[shortest] = 1;
            completed += 1;
            currentTime = completionTimes[shortest];
        }
    }

    avgWaitingTime = 0;
    avgTurnaroundTime = 0;
    for (i = 0; i < n; i++) {
        avgWaitingTime += waitingTimes[i];
        avgTurnaroundTime += turnaroundTimes[i];
    }
    avgWaitingTime /= n;
    avgTurnaroundTime /= n;

    printf("\nProcess \tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\tCompletion Time\n");
    for (i = 0; i < n; i++) {
        printf("%d \t\t %d \t\t %d \t\t %d \t\t %d \t\t %d\n", i+1, arrivalTimes[i], burstTimes[i], waitingTimes[i], turnaroundTimes[i], completionTimes[i]);
    }

    printf("\nAverage Waiting Time: %f\n", avgWaitingTime);
    printf("Average Turnaround Time: %f\n", avgTurnaroundTime);

    free(arrivalTimes);
    free(burstTimes);
    free(completionTimes);
    free(waitingTimes);
    free(turnaroundTimes);
    free(isCompleted);

    return 0;
}




//Using Java
import java.util.*;
public class SJFNonPreemptive {
 public static void main(String[] args) {
 Scanner input = new Scanner(System.in);
 System.out.print("Enter the number of processes: ");
 int n = input.nextInt();
 int[] arrivalTimes = new int[n];
 int[] burstTimes = new int[n];
 int[] completionTimes = new int[n];
 int[] waitingTimes = new int[n];
 int[] turnaroundTimes = new int[n];
 boolean[] isCompleted = new boolean[n];
 System.out.println("Enter the arrival time and burst time for each process:");
 for (int i = 0; i < n; i++) {
 System.out.print("Process " + (i+1) + " Arrival Time: ");
 arrivalTimes[i] = input.nextInt();
 System.out.print("Process " + (i+1) + " Burst Time: ");
 burstTimes[i] = input.nextInt();
 isCompleted[i] = false;
 }
 int currentTime = 0;
 int completed = 0;
 while (completed < n) {
 int shortest = -1;
 int shortestBurst = Integer.MAX_VALUE;
 for (int i = 0; i < n; i++) {
 if (!isCompleted[i] && arrivalTimes[i] <= currentTime && burstTimes[i] < shortestBurst) {
 shortest = i;
 shortestBurst = burstTimes[i];
 }
 }
 if (shortest == -1) {
 currentTime++;
 } else {
 completionTimes[shortest] = currentTime + burstTimes[shortest];
 waitingTimes[shortest] = currentTime - arrivalTimes[shortest];
 turnaroundTimes[shortest] = waitingTimes[shortest] + burstTimes[shortest];
 isCompleted[shortest] = true;
 completed++;
 currentTime = completionTimes[shortest];
 }
 }
 float avgWaitingTime = 0, avgTurnaroundTime = 0;
 for (int i = 0; i < n; i++) {
 avgWaitingTime += waitingTimes[i];
 avgTurnaroundTime += turnaroundTimes[i];
 }
 avgWaitingTime /= n;
 avgTurnaroundTime /= n;
 System.out.println("\nProcess \tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\tCompletion Time");
 for (int i = 0; i < n; i++) {
 System.out.println((i+1) + "\t\t " + arrivalTimes[i] + "\t\t " + burstTimes[i] + "\t\t " + waitingTimes[i] + "\t\t " + turnaroundTimes[i] + "\t\t " + completionTimes[i]);
 }
 System.out.println("\nAverage Waiting Time: " + avgWaitingTime);
 System.out.println("\nAverage Turnaround Time: " + avgTurnaroundTime);
 }
}




#Using python
n = int(input("Enter the number of processes: "))
arrivalTimes = [0] * n
burstTimes = [0] * n
completionTimes = [0] * n
waitingTimes = [0] * n
turnaroundTimes = [0] * n
isCompleted = [False] * n

print("Enter the arrival time and burst time for each process:")
for i in range(n):
    print("Process", i+1, "Arrival Time: ", end="")
    arrivalTimes[i] = int(input())
    print("Process", i+1, "Burst Time: ", end="")
    burstTimes[i] = int(input())
    isCompleted[i] = False

currentTime = 0
completed = 0
while completed < n:
    shortest = -1
    shortestBurst = float('inf')
    for i in range(n):
        if not isCompleted[i] and arrivalTimes[i] <= currentTime and burstTimes[i] < shortestBurst:
            shortest = i
            shortestBurst = burstTimes[i]
    if shortest == -1:
        currentTime += 1
    else:
        completionTimes[shortest] = currentTime + burstTimes[shortest]
        waitingTimes[shortest] = currentTime - arrivalTimes[shortest]
        turnaroundTimes[shortest] = waitingTimes[shortest] + burstTimes[shortest]
        isCompleted[shortest] = True
        completed += 1
        currentTime = completionTimes[shortest]

avgWaitingTime = sum(waitingTimes) / n
avgTurnaroundTime = sum(turnaroundTimes) / n

print("\nProcess \tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\tCompletion Time")
for i in range(n):
    print(i+1, "\t\t", arrivalTimes[i], "\t\t", burstTimes[i], "\t\t", waitingTimes[i], "\t\t", turnaroundTimes[i], "\t\t", completionTimes[i])

print("\nAverage Waiting Time: ", avgWaitingTime)
print("\nAverage Turnaround Time: ", avgTurnaroundTime)
