//Using C
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#define BUFFER_SIZE 10
int buffer[BUFFER_SIZE];
int reader_cnt = 0;
pthread_mutex_t read_mutex;
pthread_mutex_t write_mutex;
void *writer(void *arg)
{
 int data = *(int *)arg;
 pthread_mutex_lock(&write_mutex);
 buffer[0] = data;
 printf("Writer wrote %d\n", data);
 pthread_mutex_unlock(&write_mutex);
 pthread_exit(NULL);
}
void *reader(void *arg)
{
 int index = *(int *)arg;
 pthread_mutex_lock(&read_mutex);
 reader_cnt++;
 if (reader_cnt == 1)
 pthread_mutex_lock(&write_mutex);
 pthread_mutex_unlock(&read_mutex);
 printf("Reader %d read %d\n", index, buffer[0]);
 pthread_mutex_lock(&read_mutex);
 reader_cnt--;
 if (reader_cnt == 0)
 pthread_mutex_unlock(&write_mutex);
 pthread_mutex_unlock(&read_mutex);
 pthread_exit(NULL);
}
int main()
{
 printf("Pranav Joshi \n");
 pthread_t writers[4], readers[6];
 pthread_mutex_init(&read_mutex, NULL);
 pthread_mutex_init(&write_mutex, NULL);
 int i;
 for (i = 0; i < 4; i++)
 pthread_create(&writers[i], NULL, writer, &i);
 for (i = 0; i < 6; i++)
 pthread_create(&readers[i], NULL, reader, &i);
 for (i = 0; i < 4; i++)
 pthread_join(writers[i], NULL);
 for (i = 0; i < 6; i++)
 pthread_join(readers[i], NULL);
 pthread_mutex_destroy(&read_mutex);
 pthread_mutex_destroy(&write_mutex);
 return 0;
}


#Using python
import threading

BUFFER_SIZE = 10
buffer = [0] * BUFFER_SIZE
reader_cnt = 0
read_mutex = threading.Lock()
write_mutex = threading.Lock()

def writer(data):
    global buffer
    with write_mutex:
        buffer[0] = data
        print("Writer wrote", data)

def reader(index):
    global buffer, reader_cnt
    with read_mutex:
        reader_cnt += 1
        if reader_cnt == 1:
            write_mutex.acquire()
    print("Reader", index, "read", buffer[0])
    with read_mutex:
        reader_cnt -= 1
        if reader_cnt == 0:
            write_mutex.release()

print("Pranav Joshi")

writers = []
for i in range(4):
    t = threading.Thread(target=writer, args=(i,))
    writers.append(t)
    t.start()

readers = []
for i in range(6):
    t = threading.Thread(target=reader, args=(i,))
    readers.append(t)
    t.start()

for t in writers:
    t.join()

for t in readers:
    t.join()