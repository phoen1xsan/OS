//Using C
#include <stdio.h>
int main()
{
 int n, m, i, j, k;
 n = 0;
 m = 0;
 printf("Enter the number of processes: ");
 scanf("%d", &n);
 printf("\nEnter the number of resources: ");
 scanf("%d", &m);
 int max[n][m];
 int alloc[n][m];
 for (int i = 0; i < n; i++)
 {
 for (int j = 0; j < m; j++)
 {
 alloc[i][j] = 0;
 }
 }
 for (int i = 0; i < n; i++)
 {
 for (int j = 0; j < m; j++)
 {
 max[i][j] = 0;
 }
 }
 int avail[m];
 printf("Enter the available resources: \n");
 for (int i = 0; i < m; i++)
 {
 printf("R%d", i + 1);
 scanf("%d", &avail[i]);
 }
 printf("Enter the Allocation matrix: \n");
 for (int i = 0; i < n; i++)
 {
 for (int j = 0; j < m; j++)
 {
 scanf("\n%d", &alloc[i][j]);
 }
 }
 printf("Enter Max Resources matrix: \n");
 for (int i = 0; i < n; i++)
 {
 for (int j = 0; j < m; j++)
 {
 scanf("%d", &max[i][j]);
 }
 }
 int f[n], ans[n], ind = 0;
 for (k = 0; k < n; k++)
 {
 f[k] = 0;
 }
 int need[n][m];
 for (i = 0; i < n; i++)
 {
 for (j = 0; j < m; j++)
 need[i][j] = max[i][j] - alloc[i][j];
 }
 int y = 0;
 for (k = 0; k < 5; k++)
 {
 for (i = 0; i < n; i++)
 {
 if (f[i] == 0)
 {
 int flag = 0;
 for (j = 0; j < m; j++)
 {
 if (need[i][j] > avail[j])
 {
 flag = 1;
 break;
 }
 }
 if (flag == 0)
 {
 ans[ind++] = i;
 for (y = 0; y < m; y++)
 avail[y] += alloc[i][y];
 f[i] = 1;
 }
 }
 }
 }
 int flag = 1;
 for (int i = 0; i < n; i++)
 {
 if (f[i] == 0)
 {
 flag = 0;
 printf("The following system is Not in Safe Sequence");
 break;
 }
 }
 if (flag == 1)
 {
 printf("The following system is in Safe Sequence\n");
 printf("Safe Sequence is: ");
 for (i = 0; i < n - 1; i++)
 printf(" P%d ->", ans[i]);
 printf(" P%d", ans[n - 1]);
 }
 return (0);
}



#Using python
n = 0
m = 0
n = int(input("Enter the number of processes: "))
m = int(input("\nEnter the number of resources: "))
max = [[0 for j in range(m)] for i in range(n)]
alloc = [[0 for j in range(m)] for i in range(n)]
for i in range(n):
    for j in range(m):
        alloc[i][j] = 0
for i in range(n):
    for j in range(m):
        max[i][j] = 0
avail = []
print("Enter the available resources: ")
for i in range(m):
    print("R{}".format(i + 1), end="")
    avail.append(int(input()))
print("Enter the Allocation matrix: ")
for i in range(n):
    for j in range(m):
        alloc[i][j] = int(input())
print("Enter Max Resources matrix: ")
for i in range(n):
    for j in range(m):
        max[i][j] = int(input())
f = [0 for i in range(n)]
ans = [0 for i in range(n)]
ind = 0
need = [[0 for j in range(m)] for i in range(n)]
for i in range(n):
    for j in range(m):
        need[i][j] = max[i][j] - alloc[i][j]
y = 0
for k in range(5):
    for i in range(n):
        if f[i] == 0:
            flag = 0
            for j in range(m):
                if need[i][j] > avail[j]:
                    flag = 1
                    break
            if flag == 0:
                ans[ind] = i
                ind += 1
                for y in range(m):
                    avail[y] += alloc[i][y]
                f[i] = 1
flag = 1
for i in range(n):
    if f[i] == 0:
        flag = 0
        print("The following system is Not in Safe Sequence")
        break
if flag == 1:
    print("The following system is in Safe Sequence")
    print("Safe Sequence is: ", end="")
    for i in range(n - 1):
        print("P{} -> ".format(ans[i]), end="")
    print("P{}".format(ans[n - 1]))
